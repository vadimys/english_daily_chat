const { getWordsFromGPT } = require('../gpt');
const { parseWords } = require('../utils/parser');
const { saveWordsToDB, getLearnedWords, getUnknownWords, getWordsByDate } = require('../db');
const { prompt, WORDS_AMOUNT } = require('../config');
const { wordKeyboard, reWordKeyboard } = require('../utils/wordKeyboard');
const { startKeyboard, mainKeyboard, worksKeyboard } = require('../keyboards');

module.exports = function(bot) {
    bot.start((ctx) => {
        ctx.reply(
            'üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤.\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.',
            startKeyboard
        );
    });

    bot.command('help', (ctx) => {
        ctx.reply(
            `<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
                /words ‚Äî —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–Ω–µ–≤–∏–≤—á–µ–Ω—ñ, —è–∫—â–æ —î, –∞–±–æ –Ω–æ–≤—ñ)
                /today ‚Äî –≤—Å—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–ø–∏—Å–∫–æ–º
                /dictionary ‚Äî —Ç–≤—ñ–π —Å–ª–æ–≤–Ω–∏–∫ (—É—Å—ñ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –≤–∏–≤—á–µ–Ω—ñ)
                /unknown ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤
                /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

                –í–∏–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω—É.`,
            { ...mainKeyboard, parse_mode: 'HTML' }
        );
    });

    bot.command('words', async (ctx) => {
        const unknownWords = await getUnknownWords(WORDS_AMOUNT);
        if (unknownWords.length > 0) {
            await ctx.reply('‚è≥ –ù–∞–¥—Å–∏–ª–∞—é –Ω–µ–≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞...', worksKeyboard);
            for (const word of unknownWords) {
                await ctx.reply(
                    `<b>${word.word}</b> [${word.transcription}] ‚Äî <i>${word.translation}</i>\n${word.example}`,
                    { ...wordKeyboard(word.id), parse_mode: 'HTML' }
                );
            }
        } else {
            await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä—É—é –Ω–æ–≤—É –¥–æ–±—ñ—Ä–∫—É —Å–ª—ñ–≤...', worksKeyboard);

            try {
                const countPrompt = prompt.replace('${count}', WORDS_AMOUNT);
                const wordsText = await getWordsFromGPT(countPrompt);
                const wordsArray = await parseWords(wordsText);
                const now = new Date().toISOString().split('T')[0];
                console.log('GPT wordsArray:', wordsArray.length, wordsArray);
                await saveWordsToDB(wordsArray, now);
                console.log('–ó–±–µ—Ä–µ–∂–µ–Ω–æ —É –ë–î:', wordsArray.length);

                const newWords = await getWordsByDate(now);
                console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∑ –ë–î:', newWords.length);

                for (const w of newWords) {
                    await ctx.reply(
                        `<b>${w.word}</b> [${w.transcription}] ‚Äî <i>${w.translation}</i>\n${w.example}`,
                        { ...wordKeyboard(w.id), parse_mode: 'HTML' }
                    );
                }
            } catch (e) {
                ctx.reply('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: ' + (e.message || e), mainKeyboard);
            }
        }
    });

    bot.command('today', async (ctx) => {
        const words = await getUnknownWords(100);
        if (!words.length) return ctx.reply('–í—Å—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –≤–∏–≤—á–µ–Ω—ñ! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /words –¥–ª—è –Ω–æ–≤–æ—ó –¥–æ–±—ñ—Ä–∫–∏.', mainKeyboard);
        const text = words.map((w, idx) =>
            `${idx+1}. <b>${w.word}</b> [${w.transcription}] ‚Äî <i>${w.translation}</i>`).join('\n');
        ctx.reply('üìù –°–ª–æ–≤–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n' + text, { ...mainKeyboard, parse_mode: 'HTML' });
    });

    bot.command('dictionary', async (ctx) => {
        try {
            const text = await getLearnedWords();
            ctx.reply(text, { ...mainKeyboard, parse_mode: 'HTML' });
        } catch (e) {
            ctx.reply('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∞: ' + (e.message || e), mainKeyboard);
        }
    });

    bot.command('unknown', async (ctx) => {
        try {
            const words = await getUnknownWords(100);
            if (!words.length) return ctx.reply('–ù–µ–º–∞—î –Ω–µ–≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤!', mainKeyboard);
            const text = words.map((w, idx) => `${idx+1}. <b>${w.word}</b> [${w.transcription}] ‚Äî <i>${w.translation}</i>`).join('\n');
            ctx.reply('‚ùå –ù–µ–≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞:\n\n' + text, { ...mainKeyboard, parse_mode: 'HTML' });
        } catch (e) {
            ctx.reply('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–µ–≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤: ' + (e.message || e), mainKeyboard);
        }
    });
};
