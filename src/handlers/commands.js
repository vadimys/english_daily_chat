const { getWordsFromGPT } = require('../gpt');
const { parseWords } = require('../utils/parser');
const { saveWordsToDB, getLearnedWords, getUnknownWords } = require('../db');
const { prompt } = require('../config');
const { wordKeyboard } = require('../utils/wordKeyboard');

module.exports = function(bot) {
    bot.start((ctx) => {
        ctx.reply('üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤. –ù–∞–ø–∏—à–∏ /words, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ª–æ–≤–∞.');
        console.log('/start –≤—ñ–¥', ctx.from.id);
    });

    bot.command('words', async (ctx) => {
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞
        const unknownWords = await getUnknownWords(10);
        if (unknownWords.length > 0) {
            ctx.reply('‚è≥ –ù–∞–¥—Å–∏–ª–∞—é –Ω–µ–≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞...');
            for (const word of unknownWords) {
                await ctx.reply(
                    `${word.word} [${word.transcription}] ‚Äî ${word.translation}\nExample: ${word.example}`,
                    wordKeyboard(word.id)
                );
            }
        } else {
            // 2. –Ø–∫—â–æ –Ω–µ–º–∞ ‚Äî –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ
            ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä—É—é –Ω–æ–≤—É –¥–æ–±—ñ—Ä–∫—É —Å–ª—ñ–≤...');
            try {
                const wordsText = await getWordsFromGPT(prompt);
                const wordsArray = parseWords(wordsText);
                saveWordsToDB(wordsArray);
                for (const w of wordsArray) {
                    await ctx.reply(
                        `${w.word} [${w.transcription}] ‚Äî ${w.translation}\nExample: ${w.example}`,
                        wordKeyboard(null) // wordId –∑‚Äô—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î, —Ç—É—Ç –¥–ª—è MVP –º–æ–∂–Ω–∞ —Å–ø—Ä–æ—Å—Ç–∏—Ç–∏, –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ saveWordsToDB, —â–æ–± –≤–µ—Ä—Ç–∞—Ç–∏ id
                    );
                }
            } catch (e) {
                ctx.reply('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: ' + (e.message || e));
            }
        }
    });

    bot.command('dictionary', async (ctx) => {
        try {
            const text = await getLearnedWords();
            ctx.reply(text);
        } catch (e) {
            ctx.reply('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∞: ' + (e.message || e));
        }
    });

    bot.command('unknown', async (ctx) => {
        try {
            const words = await getUnknownWords(100);
            if (!words.length) return ctx.reply('–ù–µ–º–∞—î –Ω–µ–≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤!');
            const text = words.map((w, idx) => `${idx+1}. ${w.word} [${w.transcription}] ‚Äî ${w.translation}`).join('\n');
            ctx.reply('‚ùå –ù–µ–≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞:\n\n' + text);
        } catch (e) {
            ctx.reply('‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–µ–≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤: ' + (e.message || e));
        }
    });

    const { getUnknownWords } = require('../db');

    bot.command('today', async (ctx) => {
        const words = await getUnknownWords(10);
        if (!words.length) return ctx.reply('–í—Å—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ —Ä–æ–∑—ñ–±—Ä–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /words –¥–ª—è –Ω–æ–≤–æ—ó –¥–æ–±—ñ—Ä–∫–∏.');
        const text = words.map((w, idx) =>
            `${idx+1}. ${w.word} [${w.transcription}] ‚Äî ${w.translation}`).join('\n');
        ctx.reply('üìù –°–ª–æ–≤–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n' + text);
    });

    bot.command('help', (ctx) => {
        ctx.reply(
            `üìã *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*
            /words ‚Äî —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–Ω–µ–≤–∏–≤—á–µ–Ω—ñ, —è–∫—â–æ —î, –∞–±–æ –Ω–æ–≤—ñ)
            /dictionary ‚Äî —Ç–≤—ñ–π —Å–ª–æ–≤–Ω–∏–∫ (—É—Å—ñ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –≤–∏–≤—á–µ–Ω—ñ)
            /unknown ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤
            /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

            –ü—ñ–¥ –∫–æ–∂–Ω–∏–º —Å–ª–æ–≤–æ–º –æ–±–∏—Ä–∞–π, —á–∏ –≤–æ–Ω–æ "–í–∏–≤—á–µ–Ω–µ" —á–∏ "–ù–µ –≤–∏–≤—á–µ–Ω–µ", –Ω–∞—Ç–∏—Å–∫–∞—é—á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.`
            , { parse_mode: 'Markdown' });
    });
};
